<?xml version="1.0" encoding="UTF-8"?>
<build-type xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" uuid="9433c9c0-4459-4548-966c-74cd1df8769a" xsi:noNamespaceSchemaLocation="https://www.jetbrains.com/teamcity/schemas/2021.1/project-config.xsd">
  <name>&gt; Test</name>
  <description />
  <settings>
    <options>
      <option name="artifactRules" value="work/log =&gt; logs.zip&#xA;**/hs_err*.log =&gt; crashdumps.zip&#xA;**/core =&gt; crashdumps.zip&#xA;./**/target/rat.txt =&gt; rat.zip&#xA;/home/teamcity/ignite-startNodes/*.log =&gt; ignite-startNodes.zip&#xA;./dev-tools/IGNITE-*-*.patch =&gt; patch" />
      <option name="checkoutMode" value="ON_SERVER" />
      <option name="cleanBuild" value="true" />
      <option name="executionTimeoutMin" value="30" />
    </options>
    <disabled-settings>
      <setting-ref ref="swabra" />
    </disabled-settings>
    <parameters>
      <param name="EXTRA_MAVEN_PROFILES" value="" spec="text display='hidden' validationMode='any'" />
      <param name="IGNITE_LOGGING_OPTS" value="-DIGNITE_TEST_PROP_LOG4J_FILE=log4j-tc-test.xml -DIGNITE_QUIET=false" spec="checkbox label='Quite console output' uncheckedValue='-DIGNITE_QUIET=false' display='normal' checkedValue='-DIGNITE_TEST_PROP_LOG4J_FILE=log4j-tc-test.xml -DIGNITE_QUIET=true'" />
      <param name="JVM_ARGS" value="" spec="text display='hidden' validationMode='any'" />
      <param name="JVM_EXTRA_ARGS" value="" spec="text display='hidden' validationMode='any'" />
      <param name="MAVEN_GOALS" value="surefire:test" spec="text validationMode='any' display='hidden'" />
      <param name="MAVEN_MODULES" value=":ignite-aop" spec="text display='hidden' validationMode='any'" />
      <param name="MAVEN_OPTS" value="" spec="text display='hidden' validationMode='any'" />
      <param name="TEST_SCALE_FACTOR" value="1.0" />
      <param name="TEST_SUITE" value="IgniteAopSelfTestSuite" spec="text display='hidden' validationMode='any'" />
      <param name="XMS" value="2g" spec="text display='hidden' validationMode='any'" />
      <param name="XMX" value="2g" spec="text display='hidden' validationMode='any'" />
      <param name="env.JAVA_HOME" value="%env.JDK_ORA_8%" spec="select label_3='JDK 11' display='normal' description='Select JDK version for all tests' label='JDK version' data_1='%env.JDK_ORA_8%' label_1='JDK 8' data_3='%env.JDK_OPEN_11%'" />
      <param name="reverse.dep.*.FLAG_RUN_SANITY_CHECKS" value="true" spec="checkbox description='Check Licenses, Javadoc and Code Style along the main Build' label='Run Sanity Checks' uncheckedValue='false' display='prompt' checkedValue='true'" />
    </parameters>
    <build-runners>
      <runner id="RUNNER_264" name="Pre-build cleanup" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[#!/usr/bin/env bash
set -o nounset; set -o errexit; set -o pipefail; set -o errtrace; set -o functrace
set -x


# Pre-clean info
echo "User: $(whoami)"
echo "JPS (before): "
for process in $(%env.JAVA_HOME%/bin/jps)
do
    echo "    ${process}"
done
echo

# Kill processes
echo "Killing processes starters"
for processName in GridHadoopExternalProcessStarter HadoopExternalProcessStarter MainWithArgsInFile
do
    for PID in $(%env.JAVA_HOME%/bin/jps | grep ${processName} | awk '{ print $1 }')
    do
        echo -n "    Killing ${processName} process with PID ${PID}... "
        processInfo="$(ps aux -p $PID)"
        kill -9 ${PID} && echo "[OK]" || {
            echo "[ERROR] Unable to kill process ${PID}" && exit 1
        }
        echo "        Killed process info: ${processInfo}"
    done
done
echo
echo "Killing IgniteNodeRunner processes (before tests)"
for PID in $(%env.JAVA_HOME%/bin/jps | grep IgniteNodeRunner | awk '{ print $1 }')
do
    echo -n "    Killing process with PID ${PID}... "
    kill -9 ${PID} && echo "[OK]" || {
        echo "[ERROR] Unable to kill process ${PID}" && exit 1
    }
done
echo

# Post-clean info
echo "JPS (after): "
for process in $(%env.JAVA_HOME%/bin/jps)
do
    echo "    ${process}"
done
echo

# ULimit
ulimit -n 65535 && echo "Max number of OPEN FILE DESCRIPTORS:           $(ulimit -n)"
ulimit -u 65535 && echo "Max number of SINGLE USER AVAILABLE PROCESSES: $(ulimit -u)"
echo

# Finalize IPC cleaning
echo "Cleaning IPC resources"
for param in m s
do
    for ipcs in $(ipcs -${param} | grep 'teamcity' | awk '{ print $2 }')
    do
        ipcrm -${param} ${ipcs} || {
            echo "[ERROR] Unable to remove ${param}/${ipcs}" && exit 1
        }
    done
done]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_287" name="Install built artifacts to local maven repository" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[#!/usr/bin/env bash
set -o nounset; set -o errexit; set -o pipefail; set -o errtrace; set -o functrace
set -x


cp -rfv repository ~/.m2/]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_225" name="Add JDK9+ libraries to local Maven repository (~/.m2/repository)" type="Maven2">
        <parameters>
          <param name="goals" value="org.apache.maven.plugins:maven-dependency-plugin:2.8:get" />
          <param name="localRepoScope" value="mavenDefault" />
          <param name="maven.path" value="%teamcity.tool.maven.DEFAULT%" />
          <param name="pomLocation" value="pom.xml" />
          <param name="runnerArgs" value="-Dartifact=javax.transaction:javax.transaction-api:1.3" />
          <param name="target.jdk.home" value="%env.JDK_ORA_8%" />
          <param name="teamcity.coverage.emma.include.source" value="true" />
          <param name="teamcity.coverage.emma.instr.parameters" value="-ix -*Test*" />
          <param name="teamcity.coverage.idea.includePatterns" value="*" />
          <param name="teamcity.coverage.jacoco.patterns" value="+:*" />
          <param name="teamcity.step.mode" value="default" />
          <param name="userSettingsSelection" value="local-proxy.xml" />
        </parameters>
      </runner>
      <runner id="RUNNER_265" name="Run test suite" type="Maven2">
        <parameters>
          <param name="goals" value="%MAVEN_GOALS%" />
          <param name="jvmArgs"><![CDATA[-ea
-server
-Xms%XMS%
-Xmx%XMX%
-XX:+HeapDumpOnOutOfMemoryError
-DIGNITE_HOME=%teamcity.build.workingDir%
-DIGNITE_TEST_HOME=%teamcity.build.workingDir%
-DIGNITE_UPDATE_NOTIFIER=false
-DIGNITE_NO_DISCO_ORDER=true
-DIGNITE_PERFORMANCE_SUGGESTIONS_DISABLED=true
-Djava.net.preferIPv4Stack=true
-DTEST_SCALE_FACTOR=%TEST_SCALE_FACTOR%
%IGNITE_LOGGING_OPTS%
%JVM_ARGS%
%JVM_EXTRA_ARGS%]]></param>
          <param name="localRepoScope" value="mavenDefault" />
          <param name="maven.path" value="%teamcity.tool.maven.DEFAULT%" />
          <param name="pomLocation" value="pom.xml" />
          <param name="runnerArgs"><![CDATA[-P %MAVEN_PROFILES%
-pl %MAVEN_MODULES% -am
-Dmaven.test.failure.ignore=true
-DfailIfNoTests=false
-Dtest=%TEST_SUITE%
-Dmaven.javadoc.skip=true
%MAVEN_OPTS%]]></param>
          <param name="teamcity.coverage.emma.include.source" value="true" />
          <param name="teamcity.coverage.emma.instr.parameters" value="-ix -*Test*" />
          <param name="teamcity.coverage.idea.includePatterns" value="*" />
          <param name="teamcity.coverage.jacoco.patterns" value="+:*" />
          <param name="teamcity.step.mode" value="default" />
          <param name="userSettingsPath" value="settings.xml" />
          <param name="userSettingsSelection" value="local-proxy.xml" />
        </parameters>
      </runner>
      <runner id="RUNNER_266" name="Post-build cleanup" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[#!/usr/bin/env bash
set -o nounset; set -o errexit; set -o pipefail; set -o errtrace; set -o functrace
set -x


# Kill remaining nodes
echo "Killing CommandLineStartup processes"
for PID in $(%env.JAVA_HOME%/bin/jps | grep CommandLineStartup | awk '{ print $1 }')
do
    echo -n "    Killing remaining node process with PID ${PID}... "
    kill -9 ${PID} && echo "[OK]" || {
        echo "[ERROR] Unable to kill process ${PID}" && exit 1
    }
done
echo

# Finalize IPC cleaning
echo "Cleaning IPC resources"
for param in m s
do
    for ipcs in $(ipcs -${param} | grep 'teamcity' | awk '{ print $2 }')
    do
        ipcrm -${param} ${ipcs} || {
            echo "[ERROR] Unable to remove ${param}/${ipcs}" && exit 1
        }
    done
done
echo

# Fail build if some IPC still remains
if [ $(ipcs | grep teamcity | wc -l) -ne 0 ]
then
    echo "[ERROR] Failing build because of remaining IPC resources" >&2
    exit 1
fi

# Kill IgniteNodeRunner
echo "Killing IgniteNodeRunner processes (after tests)"
for PID in $(%env.JAVA_HOME%/bin/jps | grep IgniteNodeRunner | awk '{ print $1 }')
do
    echo -n "    Killing process with PID ${PID}... "
    kill -9 ${PID} && echo "[OK]" || {
        echo "[ERROR] Unable to kill process ${PID}" && exit 1
    }
done]]></param>
          <param name="teamcity.step.mode" value="execute_always" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
    </build-runners>
    <vcs-settings>
      <vcs-entry-ref root-id="GitHubApacheIgnite" />
    </vcs-settings>
    <requirements>
      <equals id="RQ_10" name="teamcity.agent.jvm.os.name" value="Linux" />
    </requirements>
    <build-triggers />
    <build-extensions>
      <extension id="swabra" type="swabra">
        <parameters>
          <param name="swabra.enabled" value="swabra.after.build" />
          <param name="swabra.processes" value="kill" />
          <param name="swabra.strict" value="true" />
        </parameters>
      </extension>
    </build-extensions>
    <artifact-dependencies>
      <dependency id="ARTIFACT_DEPENDENCY_103" sourceBuildTypeId="DevAi2x_Build" cleanDestination="false">
        <revisionRule name="sameChainOrLastFinished" revision="latest.sameChainOrLastFinished" />
        <artifact sourcePath="ignite.zip!** =&gt; .&#xD;&#xA;repository.zip!** =&gt; ." />
      </dependency>
    </artifact-dependencies>
    <dependencies>
      <depend-on sourceBuildTypeId="DevAi2x_Build">
        <options>
          <option name="run-build-if-dependency-failed" value="CANCEL" />
          <option name="run-build-if-dependency-failed-to-start" value="CANCEL" />
          <option name="take-started-build-with-same-revisions" value="true" />
          <option name="take-successful-builds-only" value="true" />
        </options>
      </depend-on>
    </dependencies>
    <cleanup />
  </settings>
</build-type>

